name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  # CI Job: Build and test C# and Python code on every push/PR
  ci:
    name: Build and Test
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # C# Build and Test
    - name: Setup .NET Framework
      uses: microsoft/setup-msbuild@v2

    - name: Setup NuGet
      uses: nuget/setup-nuget@v1
      with:
        nuget-version: 'latest'

    - name: Restore NuGet packages
      run: nuget restore RemoteControl.sln

    - name: Build C# Project (Debug)
      run: msbuild RemoteControlApp/RemoteControlApp.csproj /p:Configuration=Debug /p:Platform="Any CPU"

    - name: Build C# Project (Release)
      run: msbuild RemoteControlApp/RemoteControlApp.csproj /p:Configuration=Release /p:Platform="Any CPU"

    # Python Setup and Validation
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mcp pytest flake8 mypy black
        # Install additional dependencies if requirements.txt exists
        if (Test-Path requirements.txt) { pip install -r requirements.txt }

    - name: Python Code Formatting Check (Black)
      run: |
        black --check --diff *.py || echo "Python formatting check completed with differences"
      continue-on-error: true

    - name: Python Linting (Flake8)
      run: |
        flake8 *.py --max-line-length=120 --ignore=E203,W503 || echo "Python linting completed with warnings"
      continue-on-error: true

    - name: Python Type Checking (MyPy)
      run: |
        mypy *.py --ignore-missing-imports || echo "Python type checking completed with issues"
      continue-on-error: true

    - name: Test Python MCP Server
      run: |
        python test_mcp_server.py
      continue-on-error: true

    - name: Upload Build Artifacts (CI)
      uses: actions/upload-artifact@v4
      with:
        name: ci-build-artifacts
        path: |
          RemoteControlApp/bin/Debug/
          RemoteControlApp/bin/Release/
        retention-days: 7

  # Release Job: Build WiX installer and create GitHub release (only on tags)
  release:
    name: Create Release
    runs-on: windows-latest
    needs: ci
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract version from tag
      id: version
      run: |
        $version = "${{ github.ref_name }}" -replace '^v', ''
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "Version: $version"

    # C# Release Build
    - name: Setup .NET Framework
      uses: microsoft/setup-msbuild@v2

    - name: Setup NuGet
      uses: nuget/setup-nuget@v1
      with:
        nuget-version: 'latest'

    - name: Restore NuGet packages
      run: nuget restore RemoteControl.sln

    - name: Build C# Project (Release)
      run: msbuild RemoteControlApp/RemoteControlApp.csproj /p:Configuration=Release /p:Platform="Any CPU"

    # WiX Installer Build
    - name: Setup WiX Toolset
      run: |
        Write-Host "Installing WiX Toolset..."
        choco install wixtoolset -y --no-progress
        Write-Host "Refreshing environment..."
        refreshenv
        # Add WiX to PATH for this session
        $env:PATH += ";C:\Program Files (x86)\WiX Toolset v3.11\bin"
        echo "PATH=$env:PATH" >> $env:GITHUB_ENV

    - name: Build WiX Installer
      run: |
        $env:PATH += ";C:\Program Files (x86)\WiX Toolset v3.11\bin"
        msbuild RemoteControlInstaller/RemoteControlInstaller.wixproj /p:Configuration=Release /p:Platform=x86

    - name: Verify MSI exists
      run: |
        $msiPath = "RemoteControlInstaller/bin/Release/RemoteControlAppInstaller.msi"
        if (Test-Path $msiPath) {
          Write-Host "‚úì MSI file found: $msiPath"
          $size = (Get-Item $msiPath).Length
          Write-Host "‚úì MSI size: $([math]::Round($size / 1MB, 2)) MB"
        } else {
          Write-Host "‚úó MSI file not found: $msiPath"
          Get-ChildItem RemoteControlInstaller/bin -Recurse
          exit 1
        }

    # Create GitHub Release
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Remote Control v${{ steps.version.outputs.VERSION }}
        body: |
          ## Remote Control MCP Server v${{ steps.version.outputs.VERSION }}
          
          A comprehensive remote control solution that provides Claude Desktop with full access to a Windows machine through SSH tunneling.
          
          ### Features
          - üñ•Ô∏è Windows tray application with HTTP API
          - ü§ñ MCP server for Claude Desktop integration
          - üíª Remote shell operations
          - üìÅ File transfer capabilities
          - üåê Browser control
          
          ### Installation
          1. Download and run `RemoteControlAppInstaller.msi`
          2. Set up SSH tunnel: `ssh -R 8417:localhost:8417 user@linux-machine`
          3. Configure Claude Desktop with the MCP server
          4. Start controlling your Windows machine with natural language!
          
          ### Quick Start
          ```bash
          # Install MCP dependencies
          pip install mcp
          
          # Configure Claude Desktop
          # Add WinRemoteMcpServer.py to your MCP settings
          
          # Start using with Claude
          "Launch https://github.com in my Windows browser"
          "Run 'dir' command on Windows"
          "Upload file.txt to C:/temp/"
          ```
          
          See the [README](https://github.com/${{ github.repository }}/blob/main/README.md) for complete setup instructions.
          
          ### What's Changed
          - Full changelog available in commit history
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.version.outputs.VERSION }}...v${{ steps.version.outputs.VERSION }}
        draft: false
        prerelease: false

    - name: Upload MSI to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: RemoteControlInstaller/bin/Release/RemoteControlAppInstaller.msi
        asset_name: RemoteControlAppInstaller-v${{ steps.version.outputs.VERSION }}.msi
        asset_content_type: application/octet-stream

    - name: Upload Build Artifacts (Release)
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts-v${{ steps.version.outputs.VERSION }}
        path: |
          RemoteControlApp/bin/Release/
          RemoteControlInstaller/bin/Release/
        retention-days: 90